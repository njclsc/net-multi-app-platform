package bd.nmam.collection.business.task.beidian;

import java.io.PrintWriter;
import java.io.StringWriter;
import java.sql.Connection;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.concurrent.locks.ReentrantLock;

import javax.sql.DataSource;

import bd.nmam.collection.business.pojo.beidian.DevicePojo;
import bd.nmam.collection.util.beidian.ContainerUtil;
import bd.nmam.collection.util.beidian.DatabaseUtil;

public class BeidianDeviceStatusOperateThread implements Runnable{
	private SimpleDateFormat sdf;
	private SimpleDateFormat sdf1;
	private HashMap<String, DevicePojo> devices;
//	private HashMap<String, JXDevicePojo> JXdevices;
	private DataSource ds;
	private long rate;
//	private Connection con;
	private int ix = 0;
//	private StringBuffer sb;
	private String sql1 = "update tb_device set state = case deviceId ";
	private String sql2 = "when '";
	private String sql3 = "' then '";
	private String sql4 = "'";
	private String sql5 = " end where deviceId in ('";
	private String sql6 = "', '";
	private String sql7 = ")";
	private String sql8 = "update tb_aed_outdevice set state = case deviceId ";
	private ReentrantLock reentrantLock;
	private String serverType;
	public BeidianDeviceStatusOperateThread(long rate,String serverType){
		this.rate = rate;
		this.serverType = serverType;
		this.devices = ContainerUtil.getDevices();
//		this.JXdevices = ContainerUtil.getJXdevices();
		this.ds = DatabaseUtil.getDataSource();
		this.sdf = ContainerUtil.getSdfTable();
		this.sdf1 = ContainerUtil.getSdfStand();
		this.reentrantLock = ContainerUtil.getReentrantLock();
//		this.sb = new StringBuffer();
	}
	
	public void run(){
		while(true){
			//ContainerUtil.getLoggerWrite().error("设备状态更改线程存活");
			Connection con = null;
			Statement stat =  null;
			StringBuffer sb = new StringBuffer();
			try{
				if(!serverType.equalsIgnoreCase("2")&&(!serverType.equals("3"))){
					con = ds.getConnection();
					sb.append(sql1);
					Iterator<Map.Entry<String, DevicePojo>> itr = null;
					synchronized(reentrantLock){
						itr = devices.entrySet().iterator();
					
					List<String> l = new ArrayList<String>();
					int ix = 0;
					while(itr.hasNext()){
						DevicePojo dp = itr.next().getValue();
						String deviceId = dp.getDeviceId();
						String state = dp.getState();
						int temp = dp.getAlarmPreSetFlag();
						if(temp == 1){
							ix += 1;
							sb.append(sql2);sb.append(deviceId);sb.append(sql3);sb.append(state);sb.append(sql4);
							l.add(deviceId);
							dp.setAlarmPreSetFlag(2);
						}
					}
					sb.append(sql5);
					for(String s : l){
						sb.append(s);
						sb.append(sql6);
					}
					sb.append(sql7);
//				String sql = sb.toString().replace(", ')", ")");
			
//				System.out.println("dddddddddddddddddddddddd     " + sql);
			
					if(ix > 0){
						int len = sb.length();
						sb.replace(len - 4, len, ")");
						stat = con.createStatement();
						stat.executeUpdate(sb.toString());
						stat.close();
			
						System.out.println("状态更新成功!");
					}
					}
				}
//				else if(serverType.equals("3")){
//					con = ds.getConnection();
//					sb.append(sql1);
//					Iterator<Map.Entry<String, JXDevicePojo>> itr = null;
//					synchronized(reentrantLock){
//						itr = JXdevices.entrySet().iterator();
//					
//					List<String> l = new ArrayList<String>();
//					int ix = 0;
//					while(itr.hasNext()){
//						JXDevicePojo dp = itr.next().getValue();
//						String deviceId = dp.getDeviceId();
//						String state = dp.getState();
//						int temp = dp.getAlarmPreSetFlag();
//						if(temp == 1){
//							ix += 1;
//							sb.append(sql2);sb.append(deviceId);sb.append(sql3);sb.append(state);sb.append(sql4);
//							l.add(deviceId);
//							dp.setAlarmPreSetFlag(2);
//						}
//					}
//					sb.append(sql5);
//					for(String s : l){
//						sb.append(s);
//						sb.append(sql6);
//					}
//					sb.append(sql7);
////				String sql = sb.toString().replace(", ')", ")");
//			
////				System.out.println("dddddddddddddddddddddddd     " + sql);
//			
//					if(ix > 0){
//						int len = sb.length();
//						sb.replace(len - 4, len, ")");
//						stat = con.createStatement();
//						stat.executeUpdate(sb.toString());
//						stat.close();
//			
//						System.out.println("状态更新成功!");
//					}
//					}
//				}
				else{//AED采集器 更改tb_aed_outdevice表中的state状态，state 状态与缓存中相反，1代表离线，0代表在线
				
					con = ds.getConnection();
					
					sb.append(sql8);
					Iterator<Map.Entry<String, DevicePojo>> itr = null;
					synchronized(reentrantLock){
						itr = devices.entrySet().iterator();
					
					List<String> l = new ArrayList<String>();
					int ix = 0;
					while(itr.hasNext()){
						DevicePojo dp = itr.next().getValue();
						String deviceId = dp.getDeviceId();
						String state = dp.getState();
						//state状态替换
						if(state.equalsIgnoreCase("0")){
							state ="1";
						}else if(state.equalsIgnoreCase("1")){
							state = "0";
						}
						int temp = dp.getAlarmPreSetFlag();
						if(temp == 1){
							ix += 1;
							sb.append(sql2);sb.append(deviceId);sb.append(sql3);sb.append(state);sb.append(sql4);
							l.add(deviceId);
//							dp.setAlarmPreSetFlag(2);
						}
					}
					sb.append(sql5);
					for(String s : l){
						sb.append(s);
						sb.append(sql6);
					}
					sb.append(sql7);
//				String sql = sb.toString().replace(", ')", ")");
			
//				System.out.println("dddddddddddddddddddddddd     " + sql);
			//=======================================
					
			//=======================================
					if(ix > 0){
						int len = sb.length();
						sb.replace(len - 4, len, ")");
						ContainerUtil.getLoggerWrite().error(sdf1.format(new Date()) + "  ix = " + ix + "  执行前sql = " + sb.toString());
						stat = con.createStatement();
						stat.executeUpdate(sb.toString());
						stat.close();
						//=======================================
						ContainerUtil.getLoggerWrite().error(sdf1.format(new Date()) + "  ix = " + ix + "  执行后sql = " + sb.toString());
						//=======================================
						for(String dev:l){
							DevicePojo Dp = devices.get(dev);
							Dp.setAlarmPreSetFlag(2);
						}
						System.out.println("状态更新成功!");
					}
				}
//			sb.delete(0, sb.length());
				}
			Thread.sleep(rate);
			}catch(Exception e){
				e.printStackTrace();
				StringWriter sw = new StringWriter();
				e.printStackTrace(new PrintWriter(sw));
				ContainerUtil.getLoggerWrite().error(sw.toString());
			}finally{
				try {
					sb.delete(0, sb.length());
					if(stat != null){
						stat.close();
					}
					if(con != null){
						con.close();
					}
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
//			System.out.println("dddddddddddddddddddddddd     " + sql);
			
		}
	}
}
