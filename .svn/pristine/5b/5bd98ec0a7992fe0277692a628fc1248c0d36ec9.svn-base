package bd.nmam.history.business.serviceimp;

import java.io.File;
import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Service;
import org.springframework.util.ResourceUtils;
import org.springframework.web.multipart.MultipartFile;

import com.alibaba.fastjson.JSONObject;

import bd.nmam.history.business.pojo.ResponsePojo1;
import bd.nmam.history.business.pojo.SourceMessagePojo;
import bd.nmam.history.business.service.IStaticSourceManagerService;
import bd.nmam.history.config.AppConfigure;


@Service("StaticSourceManagerImp")
public class StaticSourceManagerImp implements IStaticSourceManagerService{


	@Override
	public String uploadOperate(MultipartFile[] files, HttpServletRequest request) {
		// TODO Auto-generated method stub
		System.out.println("阿西吧------");
//		String result = "";
		ResponsePojo rp = new ResponsePojo();
		try{
			rp.setUrls(new ArrayList<String>());
			for(MultipartFile file : files){
				JSONObject js = JSONObject.parseObject(request.getParameter("message"));
				String fileName = AppConfigure.tokenParse(request.getHeader("bd-token"), "account") + "_" + 
						System.currentTimeMillis() + "_" + file.getOriginalFilename();
				String path = ResourceUtils.getURL("classpath:").getPath() + "static/" + js.getString("sourceType") + "/" + fileName;
				File f = new File(path.substring(1));
				if(!f.exists()){
					f.getParentFile().mkdirs();
					f.createNewFile();
				}
				FileOutputStream fos = new FileOutputStream(f);
				fos.write(file.getBytes());
				fos.flush();
				fos.close();
				String result = "http://" + request.getLocalAddr() + ":" + request.getLocalPort() + request.getContextPath() + "/" + 
						js.getString("sourceType") + "/" + fileName;
				rp.getUrls().add(result);
				rp.setFileName(fileName);
			}
			rp.setState("success");
		}catch(Exception e){
			e.printStackTrace();
		}
		return JSONObject.toJSONString(rp);
	}

	@Override
	public String removeOperate(SourceMessagePojo sourceMessagePojo) {
		// TODO Auto-generated method stub
		ResponsePojo1 rp = new ResponsePojo1();
		
		try{
			String path = ResourceUtils.getURL("classpath:").getPath() + "static/" + sourceMessagePojo.getSourceType() + "/" + 
					sourceMessagePojo.getResultData();
			File f = new File(path.substring(1));
			if(f.exists()){
				f.delete();
			}
			sourceMessagePojo.setState("success");
			rp.setAction("history/staticSource/remove");
			rp.setMessage("文件删除成功");
			rp.setState("success");
		}catch(Exception e){
			e.printStackTrace();
		}
		return JSONObject.toJSONString(rp);
	}

	class ResponsePojo{
		private String state;
		private List<String> urls;
		private String fileName;
		public String getState() {
			return state;
		}
		public void setState(String state) {
			this.state = state;
		}
		public List<String> getUrls() {
			return urls;
		}
		public String getFileName() {
			return fileName;
		}
		public void setFileName(String fileName) {
			this.fileName = fileName;
		}
		public void setUrls(List<String> urls) {
			this.urls = urls;
		}
	}
}
