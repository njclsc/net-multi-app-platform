package bd.nmam.collection.business.handler.beidian;

import java.io.PrintWriter;
import java.io.StringWriter;
import java.net.InetSocketAddress;
import java.util.List;

import bd.nmam.collection.business.pojo.beidian.DeviceCommandPojo;
import bd.nmam.collection.business.pojo.beidian.DeviceInfoPojo;
import bd.nmam.collection.business.pojo.beidian.DevicePojo;
import bd.nmam.collection.util.beidian.ContainerUtil;
import io.netty.buffer.ByteBuf;
import io.netty.buffer.Unpooled;
import io.netty.channel.ChannelHandlerContext;
import io.netty.channel.ChannelInboundHandlerAdapter;
import io.netty.channel.socket.DatagramPacket;

public class BeidianUDPDeviceInfoHandler extends ChannelInboundHandlerAdapter{
	private final String TYPE_DEVINFO = "02";
	private String deviceId;

	@Override
	public void channelActive(ChannelHandlerContext ctx) throws Exception {
		// TODO Auto-generated method stub
		// super.channelActive(ctx);
		// System.out.println(ctx.channel().remoteAddress().toString());
		// ContainerUtil.getTcpClientFuture().put(ctx.channel().remoteAddress().toString().substring(1),
		// ctx.channel());
		ctx.fireChannelActive();
	}

	@Override
	public void channelRead(ChannelHandlerContext ctx, Object msg)
			throws Exception {
		// TODO Auto-generated method stub
		// super.channelRead(ctx, msg);
		String data = (String) msg;
		Logger.getLogger("r3").info(data);
		String[] datas = data.split("####");
		switch (datas[1].substring(8, 10)) {
		case TYPE_DEVINFO:
			System.out.println("心跳--" + data);
			if (!ContainerUtil.getUdpClientFuture().containsKey(datas[0])) {
				ContainerUtil.getUdpClientFuture().put(datas[0], ctx.channel());
			}
			System.out.println("wwwwxxxx-2");
			operate(datas[1]);
			System.out.println("wwwwxxxx-1");
			ByteBuf deviceResponse = Unpooled.copiedBuffer(ContainerUtil
					.report(datas[1]));
			String[] addr = datas[0].split(":");
			DatagramPacket dp = new DatagramPacket(deviceResponse,
					new InetSocketAddress(addr[0], Integer.parseInt(addr[1])));
			ctx.writeAndFlush(dp);
			Logger.getLogger("r3").info(datas[1]);
			Thread.sleep(1000);
			System.out.println("wwwwxxxx0");
			//缓存指令下发
			deviceId = datas[1].substring(16, 32);
			DeviceCommandPojo dcp = ContainerUtil.getDeviceCommBuf().get(deviceId);
			if(dcp!=null){
			dcp.setAddress(addr[0]);
			dcp.setPort(addr[1]);
			//==================================================
			List<String> index = dcp.get_INDEX();
			List<String> cmd = dcp.get_CMD();
//			System.out.println("wwwwxxxx1");
			for(int i = 0; i < index.size(); i++){
//				System.out.println("wwwwxxxx3 " + i);
				String[] _index = index.get(i).split("#");
				System.out.println(i + " " + _index[2] + " " + _index[3] + " " + _index[0]);
				if(_index[2].equals("0") && !_index[3].equals(_index[0])){
					System.out.println("send 4");
					byte[] data1 = ContainerUtil.message2Bytes(cmd.get(i));
					ByteBuf deviceCMD = Unpooled.copiedBuffer(data1);
					DatagramPacket dpCMD = new DatagramPacket(deviceCMD,
							new InetSocketAddress(addr[0], Integer.parseInt(addr[1])));
					ctx.writeAndFlush(dpCMD);
					index.set(i, _index[0] + "#" + (Integer.parseInt(_index[1]) + 1) + "#" + _index[2] + "#" + _index[3]);
					break;//设备端接收能力有限，发送一帧缓存指令后，中断发送循环
				}
			}
			
			
			//==================================================
//			if(dcp!=null && dcp.getCMD()!=null && dcp.getIssueFlag()==1){
//				String CMD = dcp.getCMD();
//				byte[] cmd = ContainerUtil.message2Bytes(CMD);
//				ByteBuf deviceCMD = Unpooled.copiedBuffer(cmd);
//				DatagramPacket dpCMD = new DatagramPacket(deviceCMD,
//					new InetSocketAddress(addr[0], Integer.parseInt(addr[1])));
//				ctx.writeAndFlush(dpCMD);
//			}
			}
			break;

		default:
			ctx.fireChannelRead(msg);
			break;
		}
	}

	@Override
	public void channelReadComplete(ChannelHandlerContext ctx) throws Exception {
		// TODO Auto-generated method stub
		// super.channelReadComplete(ctx);
	}

	@Override
	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause)
			throws Exception {
		// TODO Auto-generated method stub
		// super.exceptionCaught(ctx, cause);
		cause.printStackTrace();
		StringWriter sw = new StringWriter();
		cause.printStackTrace(new PrintWriter(sw));
		ContainerUtil.getLoggerWrite().error(sw.toString());
	}

	private void operate(String data) {
		String deviceId = data.substring(16, 32);
		if (ContainerUtil.checkSUM(data)) {
			DevicePojo dp = ContainerUtil.getDevices().get(deviceId);
			if (dp == null) {
				System.out.println("该" + deviceId + "设备不在档案内，请检查设备基础信息");
			} else {
				dp.setRefreshTime(System.currentTimeMillis());
				// 指令解析
				// 7E 10 01 81 02 20 2C 00 00 02 83 19 05 11 00 88 00 00 00 07
				// 01 00 00 01 00 00 08 68
				// 68 10 49 58 63 14 89 86 03 17 42 20 51 74 60 84 00 00 00 00
				// 00 00 00 00 00 F8 A7 0D
				String CmdType = data.substring(14, 16);
				if (CmdType.equalsIgnoreCase("01")) {
					if(data.substring(10, 14).equalsIgnoreCase("6037")){
						String softVer = Version(data.substring(34, 40));
						String protocolVer = Version(data.substring(40, 46));
						String hardwareVer = Version(data.substring(46, 52));
						String IMEI = data.substring(53, 68);
						//SIM卡号统一获取20位 by seifer 210126
						String SIM = data.substring(68, 88);
						String LAC = data.substring(88,94);
						String CELLID = data.substring(94,104);
						String PCI = data.substring(104,110);
						DeviceInfoPojo dip = new DeviceInfoPojo();
						dip.setSoftVer(softVer);
						dip.setProtocolVer(protocolVer);
						dip.setHardwareVer(hardwareVer);
						dip.setIMEI(IMEI);
						dip.setSIM(SIM);
						dip.setLAC(LAC);
						dip.setCELLID(CELLID);
						dip.setPCI(PCI);
						dp.setDip(dip);
						dp.setDeviceInfoFlag(1);
					}else{
						String softVer = Version(data.substring(34, 40));
						String protocolVer = Version(data.substring(40, 46));
						String hardwareVer = Version(data.substring(46, 52));
						String IMEI = data.substring(53, 68);
						String SIM = data.substring(68, 87);
						DeviceInfoPojo dip = new DeviceInfoPojo();
						dip.setSoftVer(softVer);
						dip.setProtocolVer(protocolVer);
						dip.setHardwareVer(hardwareVer);
						dip.setIMEI(IMEI);
						dip.setSIM(SIM);
						dp.setDip(dip);
						dp.setDeviceInfoFlag(1);
					}
				} else {
					String softVer = Version(data.substring(34, 40));
					String protocolVer = Version(data.substring(40, 46));
					String hardwareVer = Version(data.substring(46, 52));
					DeviceInfoPojo dip = new DeviceInfoPojo();
					dip.setSoftVer(softVer);
					dip.setProtocolVer(protocolVer);
					dip.setHardwareVer(hardwareVer);
					dp.setDip(dip);
					dp.setDeviceInfoFlag(1);
				}
			}
		} else {
			System.out.println(deviceId + "设备基础信息指令校验失败");
		}
	}

	private String Version(String ver) {
		String ver1 = String.valueOf(Integer.parseInt(ver.substring(0, 2), 16));
		String ver2 = String.valueOf(Integer.parseInt(ver.substring(2, 4), 16));
		String ver3 = String.valueOf(Integer.parseInt(ver.substring(4, 6), 16));
		String VER = "V" + ver1 + "." + ver2 + "." + ver3;
		return VER;
	}
}
