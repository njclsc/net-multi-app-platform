package bd.nmam.collection.business.handler.beidian;

import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import bd.nmam.collection.business.pojo.beidian.AlarmPreSetPojo;
import bd.nmam.collection.business.pojo.beidian.DevicePojo;
import bd.nmam.collection.util.beidian.ContainerUtil;
import io.netty.channel.ChannelHandlerContext;
import io.netty.channel.ChannelInboundHandlerAdapter;

public class BeidianUDPCacheDisplayHandler extends ChannelInboundHandlerAdapter{
	private HashMap<String,String> devVers;
	private final String TYPE_CACHEDISPLAY = "FF";
	private String deviceId;
	
	@Override
	public void channelActive(ChannelHandlerContext ctx) throws Exception {
		this.devVers = ContainerUtil.getDevVers();
		ctx.fireChannelActive();
	}
	
	
	@Override
	public void channelRead(ChannelHandlerContext ctx, Object msg)
			throws Exception {
		String data = (String)msg;
		Logger.getLogger("r3").info(data);
		String[] datas = data.split("####");
		switch(datas[1].substring(8, 10)){
		case TYPE_CACHEDISPLAY:
			System.out.println("内存查询" + data);
			operate(datas[1]);
			Logger.getLogger("r3").info(datas[1]);
			break;
			
		default:
			ctx.fireChannelRead(msg);
			break;
		}
	}
	
	@Override
	public void channelReadComplete(ChannelHandlerContext ctx) throws Exception {
		// TODO Auto-generated method stub
//		super.channelReadComplete(ctx);
//		reportPart1 = "";
//		reportPart2 = "";
//		reportPart3 = "";
//		CHKSUM ="";
		
	}

	@Override
	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause)
			throws Exception {
		// TODO Auto-generated method stub
//		super.exceptionCaught(ctx, cause);
		cause.printStackTrace();
		StringWriter sw = new StringWriter();
		cause.printStackTrace(new PrintWriter(sw));
		ContainerUtil.getLoggerWrite().error(sw.toString());
	}
	
	private void operate(String data){
		//对应deviceId的内存数据显示
		deviceId = data.substring(16, 32);
		if (ContainerUtil.checkSUM(data)) {
			DevicePojo dp = ContainerUtil.getDevices().get(deviceId);
			if (dp == null) {
				System.out.println("该" + deviceId + "设备不在档案内，请检查设备基础信息");
			} else {
				String state = "设备ID:"+dp.getDeviceId()+" 设备状态位:"+dp.getState()+" 离线告警状态位:"+dp.getOfflineAlarmState();
				System.out.println(state);
				Logger.getLogger("r3").info("内存状态：" + state);
				Iterator<Map.Entry<String, AlarmPreSetPojo>> itr = dp
						.getAlarmPreSet().entrySet().iterator();
				//告警内存状态显示
				while (itr.hasNext()) {
					AlarmPreSetPojo cache = itr.next().getValue();
					String log ="设备ID:" + dp.getDeviceId()+" 信号ID:"+cache.getSignalId()+" 告警状态:"+cache.getAlarmStatus();
					System.out.println(log);
					Logger.getLogger("r3").info("内存数据：" + log);
				}
			}
		}
		//return null;
	}
}
