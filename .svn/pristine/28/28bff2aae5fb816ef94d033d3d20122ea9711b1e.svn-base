package bd.nmam.collection.business.handler.beidian;

import java.io.PrintWriter;
import java.io.StringWriter;
import java.net.InetSocketAddress;
import java.util.List;

import bd.nmam.collection.business.pojo.beidian.DeviceCommandPojo;
import bd.nmam.collection.business.pojo.beidian.DevicePojo;
import bd.nmam.collection.business.pojo.beidian.GPSPojo;
import bd.nmam.collection.util.beidian.ContainerUtil;
import io.netty.buffer.ByteBuf;
import io.netty.buffer.Unpooled;
import io.netty.channel.ChannelHandlerContext;
import io.netty.channel.ChannelInboundHandlerAdapter;
import io.netty.channel.socket.DatagramPacket;

public class BeidianUDPGPSInfoHandler extends ChannelInboundHandlerAdapter{
	private final String TYPE_GPSINFO = "20";
	private String deviceId;
	
	@Override
	public void channelActive(ChannelHandlerContext ctx) throws Exception {
		ctx.fireChannelActive();
	}
	
	@Override
	public void channelRead(ChannelHandlerContext ctx, Object msg)
			throws Exception {
		String data = (String) msg;
		Logger.getLogger("r3").info(data);
		String[] datas = data.split("####");
		switch (datas[1].substring(8, 10)) {
			case TYPE_GPSINFO:
				System.out.println("设备GPS信息" + data);
				operate(datas[1]);
				ByteBuf deviceResponse = Unpooled.copiedBuffer(ContainerUtil
						.report(datas[1]));
				String[] addr = datas[0].split(":");
				DatagramPacket dp = new DatagramPacket(deviceResponse,
						new InetSocketAddress(addr[0], Integer.parseInt(addr[1])));
				ctx.writeAndFlush(dp);
				Logger.getLogger("r3").info(datas[1]);
				Thread.sleep(1000);
				//缓存指令下发
				deviceId = datas[1].substring(16, 32);
				DeviceCommandPojo dcp = ContainerUtil.getDeviceCommBuf().get(deviceId);
				if(dcp!=null){
					dcp.setAddress(addr[0]);
					dcp.setPort(addr[1]);
					//==================================================
					List<String> index = dcp.get_INDEX();
					List<String> cmd = dcp.get_CMD();
					System.out.println("wwwwxxxx1");
					for(int i = 0; i < index.size(); i++){
						System.out.println("wwwwxxxx3 " + i);
						String[] _index = index.get(i).split("#");
						System.out.println(i + " " + _index[2] + " " + _index[3] + " " + _index[0]);
						if(_index[2].equals("0") && !_index[3].equals(_index[0])){
							System.out.println("send 4");
							byte[] data1 = ContainerUtil.message2Bytes(cmd.get(i));
							ByteBuf deviceCMD = Unpooled.copiedBuffer(data1);
							DatagramPacket dpCMD = new DatagramPacket(deviceCMD,
									new InetSocketAddress(addr[0], Integer.parseInt(addr[1])));
							ctx.writeAndFlush(dpCMD);
							index.set(i, _index[0] + "#" + (Integer.parseInt(_index[1]) + 1) + "#" + _index[2] + "#" + _index[3]);
							break;//设备端接收能力有限，发送一帧缓存指令后，中断发送循环
						}
					}
				}
				break;
			default:
				ctx.fireChannelRead(msg);
				break;
		}
	}
	
	@Override
	public void channelReadComplete(ChannelHandlerContext ctx) throws Exception {
		// TODO Auto-generated method stub
		// super.channelReadComplete(ctx);
	}
	
	@Override
	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause)
			throws Exception {
		// TODO Auto-generated method stub
		// super.exceptionCaught(ctx, cause);
		cause.printStackTrace();
		StringWriter sw = new StringWriter();
		cause.printStackTrace(new PrintWriter(sw));
		ContainerUtil.getLoggerWrite().error(sw.toString());
	}
	
	private void operate(String data){
		String deviceId = data.substring(16, 32);
		if (ContainerUtil.checkSUM(data)) {
			DevicePojo dp = ContainerUtil.getDevices().get(deviceId);
			if(dp==null){
				System.out.println("该"+deviceId+"设备不在档案内，请检查设备基础信息");
			}else{
				dp.setRefreshTime(System.currentTimeMillis());
				//指令解析
				//7e 10 01 32 20 50 29 00 00 02 32 20 07 22 00 04 66 10 02 60 6a 38 f3 
				//42 66 10 02 70 fe 08 fa 41 66 10 02 80 00 00 00 41 66 10 02 90 00 00 
				//00 00 00 0b f6 7f 0d 
				if(data.substring(10, 14).equalsIgnoreCase("5029")){
					int GPSLen = 4;
					String[] GPSData = new String[GPSLen];
					String[] GPS = new String[GPSLen];
					int j = 32;
					for (int i = 0; i < GPSLen; i++) {
						GPS[i] = data.substring(j, j + 8);
						j = j + 8;
						GPSData[i] = String.valueOf(ContainerUtil
								.getFloat(ContainerUtil.hexStrToBytes(data
										.substring(j, j + 8))));
						j = j + 8;
					}
					String BDGPS = ContainerUtil.changgeXY(GPSData[0], GPSData[1]);
					String[] GPSCoordinate = BDGPS.split(",");
					GPSPojo gp = new GPSPojo();
					gp.setLongitude(GPSData[0]);
					gp.setLatitude(GPSData[1]);
					gp.setHeight(GPSData[2]);
					gp.setSpeed(GPSData[3]);
					gp.setBDlongitude(GPSCoordinate[0]);
					gp.setBDlatitude(GPSCoordinate[1]);
					dp.setGp(gp);
					dp.setGPSInfoFlag(1);
				}
			}
		}else{
			System.out.println(deviceId + "设备基础信息指令校验失败");
		}
	}
}
