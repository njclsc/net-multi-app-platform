package bd.nmam.login.business.serviceimp;

import java.util.List;
import java.util.Map;

import org.apache.shiro.SecurityUtils;
import org.apache.shiro.authc.IncorrectCredentialsException;
import org.apache.shiro.authc.UnknownAccountException;
import org.apache.shiro.authc.UsernamePasswordToken;
import org.apache.shiro.subject.Subject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;

import com.alibaba.fastjson.JSONObject;

import bd.nmam.login.business.dao.ILoginDao;
import bd.nmam.login.business.pojo.ModularPojo;
import bd.nmam.login.business.pojo.ResponsePojo;
import bd.nmam.login.business.pojo.UserPojo;
import bd.nmam.login.business.service.ILoginService;
import bd.nmam.login.config.AppConfigure;
import redis.clients.jedis.JedisCluster;
@Service("LoginServiceImp")
public class LoginServiceImp implements ILoginService{
	@Autowired
	private ILoginDao loginDao;
	@Autowired
	@Qualifier("rediSource")
	private JedisCluster jedis;
	@Override
	public String loginCheck(Map<String, String> paramMap) {
		// TODO Auto-generated method stub
		ResponsePojo rp = new ResponsePojo();
		try{
			UsernamePasswordToken token = new UsernamePasswordToken(paramMap.get("account"), paramMap.get("password"));
			Subject subject = SecurityUtils.getSubject();
			subject.login(token);
			UserPojo up = new UserPojo();
			up.setAccount(paramMap.get("account"));
			up.setOrganizationId(AppConfigure.getOrganizationId());
			UserPojo _up = loginDao.loadUserInfo(up);
			_up.setPassword("");
			_up.setLogin(true);
			jedis.set(_up.getOrganizationId() + "-" + _up.getAccount(), JSONObject.toJSONString(_up));
			String web_token = AppConfigure.tokenOperate(1, _up);
			rp.setState("success");
			rp.setMessage("登录验证成功");
			rp.setToken(web_token);
			
			List<ModularPojo> mps = loadModular(_up.getId(), 0);
			rp.setResult(mps);
		}catch(UnknownAccountException e){
			e.printStackTrace();
			rp.setState("fail");
			rp.setMessage("账号错误");
		}catch(IncorrectCredentialsException e){
			e.printStackTrace();
			rp.setState("fail");
			rp.setMessage("密码错误");
		}
		rp.setAction("login/check");
		return JSONObject.toJSONString(rp);
	}

	@Override
	public String loginOut(Map<String, String> paramMap) {
		// TODO Auto-generated method stub
		ResponsePojo rp = new ResponsePojo();
		int organizationId = AppConfigure.getOrganizationId();
		String account = paramMap.get("account");
		jedis.del(organizationId + "-" + account);
		rp.setAction("login/check");
		rp.setState("success");
		rp.setMessage("用户已退出");
		return JSONObject.toJSONString(rp);
	}

	@Override
	public List<ModularPojo> loadModular(int userIndex, int parentId) {
		// TODO Auto-generated method stub
		List<ModularPojo> mps = loginDao.findModular(userIndex, 0, 0);
		for(ModularPojo mp : mps){
			load(userIndex, mp);
		}
		return mps;
	}
	public ModularPojo load(int userIndex, ModularPojo mp){
		List<ModularPojo> _cmp = loginDao.findModular(userIndex, mp.getModularLevel() + 1, mp.getId());
		for(ModularPojo _tmp : _cmp){
			load(userIndex, _tmp);
		}
		mp.setChildren(_cmp);
		return mp;
	}
}
